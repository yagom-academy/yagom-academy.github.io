I"0s<h1 id="conventions">Conventions</h1>

<h2 id="general-conventions">General Conventions</h2>

<details>
<summary>General Conventions 원문보기</summary>
<div>

    <ul>
      <li>
        <p><strong>Document the complexity of any computed property that is not O(1).</strong> People often assume that property access involves no significant computation, because they have stored properties as a mental model. Be sure to alert them when that assumption may be violated.</p>
      </li>
      <li><strong>Prefer methods and properties to free functions.</strong> Free functions are used only in special cases:
        <details>
  <summary>DETAIL</summary>
  <div>

            <ol>
              <li>When there’s no obvious self:
                <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nf">min</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span>
</code></pre></div>                </div>
              </li>
              <li>When the function is an unconstrained generic:
                <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div>                </div>
              </li>
              <li>When function syntax is part of the established domain notation:
                <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nf">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div>                </div>
              </li>
            </ol>

          </div>
  </details>
      </li>
      <li><strong>Follow case conventions.</strong> Names of types and protocols are UpperCamelCase. Everything else is lowerCamelCase.
        <details>
  <summary>DETAIL</summary>
  <div>

            <p><a href="https://en.wikipedia.org/wiki/Acronym">Acronyms and initialisms</a> that commonly appear as all upper case in American English should be uniformly up- or down-cased according to case conventions:</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">var</span> <span class="nv">utf8Bytes</span><span class="p">:</span> <span class="p">[</span><span class="kt">UTF8</span><span class="o">.</span><span class="kt">CodeUnit</span><span class="p">]</span>
  <span class="k">var</span> <span class="nv">isRepresentableAsASCII</span> <span class="o">=</span> <span class="kc">true</span>
  <span class="k">var</span> <span class="nv">userSMTPServer</span><span class="p">:</span> <span class="kt">SecureSMTPServer</span>
</code></pre></div>            </div>

            <p>Other acronyms should be treated as ordinary words:</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">var</span> <span class="nv">radarDetector</span><span class="p">:</span> <span class="kt">RadarScanner</span>
  <span class="k">var</span> <span class="nv">enjoysScubaDiving</span> <span class="o">=</span> <span class="kc">true</span>
</code></pre></div>            </div>

          </div>
  </details>
      </li>
      <li><strong>Methods can share a base name</strong> when they share the same basic meaning or when they operate in distinct domains.
        <details>
  <summary>DETAIL</summary>
  <div>

            <p>For example, the following is encouraged, since the methods do essentially the same things:</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">✅</span>
  <span class="kd">extension</span> <span class="kt">Shape</span> <span class="p">{</span>
      <span class="c1">/// Returns `true` iff `other` is within the area of `self`.</span>
      <span class="kd">func</span> <span class="nf">contains</span><span class="p">(</span><span class="n">_</span> <span class="nv">other</span><span class="p">:</span> <span class="kt">Point</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>

      <span class="c1">/// Returns `true` iff `other` is entirely within the area of `self`.</span>
      <span class="kd">func</span> <span class="nf">contains</span><span class="p">(</span><span class="n">_</span> <span class="nv">other</span><span class="p">:</span> <span class="kt">Shape</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>

      <span class="c1">/// Returns `true` iff `other` is within the area of `self`.</span>
      <span class="kd">func</span> <span class="nf">contains</span><span class="p">(</span><span class="n">_</span> <span class="nv">other</span><span class="p">:</span> <span class="kt">LineSegment</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>            </div>

            <p>And since geometric types and collections are separate domains, this is also fine in the same program:</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">✅</span>
  <span class="kd">extension</span> <span class="kt">Collection</span> <span class="k">where</span> <span class="kt">Element</span> <span class="p">:</span> <span class="kt">Equatable</span> <span class="p">{</span>
      <span class="c1">/// Returns `true` iff `self` contains an element equal to</span>
      <span class="c1">/// `sought`.</span>
      <span class="kd">func</span> <span class="nf">contains</span><span class="p">(</span><span class="n">_</span> <span class="nv">sought</span><span class="p">:</span> <span class="kt">Element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>            </div>

            <p>However, these index methods have different semantics, and should have been named differently:</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">❌</span>
  <span class="kd">extension</span> <span class="kt">Database</span> <span class="p">{</span>
      <span class="c1">/// Rebuilds the database's search index</span>
      <span class="kd">func</span> <span class="nf">index</span><span class="p">()</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>

      <span class="c1">/// Returns the `n`th row in the given table.</span>
      <span class="kd">func</span> <span class="nf">index</span><span class="p">(</span><span class="n">_</span> <span class="nv">n</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">inTable</span><span class="p">:</span> <span class="kt">TableID</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">TableRow</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>            </div>

            <p>Lastly, avoid “overloading on return type” because it causes ambiguities in the presence of type inference.</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">❌</span>
  <span class="kd">extension</span> <span class="kt">Box</span> <span class="p">{</span>
      <span class="c1">/// Returns the `Int` stored in `self`, if any, and</span>
      <span class="c1">/// `nil` otherwise.</span>
      <span class="kd">func</span> <span class="nf">value</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">?</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>

      <span class="c1">/// Returns the `String` stored in `self`, if any, and</span>
      <span class="c1">/// `nil` otherwise.</span>
      <span class="kd">func</span> <span class="nf">value</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>            </div>

          </div>
  </details>
      </li>
    </ul>

  </div>
</details>

<p>번역문</p>

<p>.</p>

<h2 id="parameters">Parameters</h2>

<details>
<summary>Parameters 원문보기</summary>
<div>

    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">move</span><span class="p">(</span><span class="n">from</span> <span class="nv">start</span><span class="p">:</span> <span class="kt">Point</span><span class="p">,</span> <span class="n">to</span> <span class="nv">end</span><span class="p">:</span> <span class="kt">Point</span><span class="p">)</span>
</code></pre></div>    </div>

    <ul>
      <li><strong>Choose parameter names to serve documentation.</strong> Even though parameter names do not appear at a function or method’s point of use, they play an important explanatory role.
        <details>
  <summary>DETAIL</summary>
  <div>

            <p>Choose these names to make documentation easy to read. For example, these names make documentation read naturally:</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">✅</span>
  <span class="c1">/// Return an `Array` containing the elements of `self`</span>
  <span class="c1">/// that satisfy `predicate`.</span>
  <span class="kd">func</span> <span class="nf">filter</span><span class="p">(</span><span class="n">_</span> <span class="nv">predicate</span><span class="p">:</span> <span class="p">(</span><span class="kt">Element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Generator</span><span class="o">.</span><span class="kt">Element</span><span class="p">]</span>

  <span class="c1">/// Replace the given `subRange` of elements with `newElements`.</span>
  <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">replaceRange</span><span class="p">(</span><span class="n">_</span> <span class="nv">subRange</span><span class="p">:</span> <span class="kt">Range</span><span class="p">,</span> <span class="n">with</span> <span class="nv">newElements</span><span class="p">:</span> <span class="p">[</span><span class="kt">E</span><span class="p">])</span>
</code></pre></div>            </div>

            <p>These, however, make the documentation awkward and ungrammatical:</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">❌</span>
  <span class="c1">/// Return an `Array` containing the elements of `self`</span>
  <span class="c1">/// that satisfy `includedInResult`.</span>
  <span class="kd">func</span> <span class="nf">filter</span><span class="p">(</span><span class="n">_</span> <span class="nv">includedInResult</span><span class="p">:</span> <span class="p">(</span><span class="kt">Element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Generator</span><span class="o">.</span><span class="kt">Element</span><span class="p">]</span>

  <span class="c1">/// Replace the range of elements indicated by `r` with</span>
  <span class="c1">/// the contents of `with`.</span>
  <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">replaceRange</span><span class="p">(</span><span class="n">_</span> <span class="nv">r</span><span class="p">:</span> <span class="kt">Range</span><span class="p">,</span> <span class="nv">with</span><span class="p">:</span> <span class="p">[</span><span class="kt">E</span><span class="p">])</span>
</code></pre></div>            </div>

          </div>
  </details>
      </li>
      <li><strong>Take advantage of defaulted parameters</strong> when it simplifies common uses. Any parameter with a single commonly-used value is a candidate for a default.
        <details>
  <summary>DETAIL</summary>
  <div>

            <p>Default arguments improve readability by hiding irrelevant information. For example:</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">❌</span>
  <span class="k">let</span> <span class="nv">order</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">.</span><span class="nf">compare</span><span class="p">(</span>
  <span class="n">royalFamilyName</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">range</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">locale</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
</code></pre></div>            </div>

            <p>can become the much simpler:</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">✅</span>
  <span class="k">let</span> <span class="nv">order</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">.</span><span class="nf">compare</span><span class="p">(</span><span class="n">royalFamilyName</span><span class="p">)</span>
</code></pre></div>            </div>

            <p>Default arguments are generally preferable to the use of method families, because they impose a lower cognitive burden on anyone trying to understand the API.</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">✅</span>
  <span class="kd">extension</span> <span class="kt">String</span> <span class="p">{</span>
      <span class="c1">/// ...description...</span>
      <span class="kd">public</span> <span class="kd">func</span> <span class="nf">compare</span><span class="p">(</span>
          <span class="n">_</span> <span class="nv">other</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="kt">CompareOptions</span> <span class="o">=</span> <span class="p">[],</span>
          <span class="nv">range</span><span class="p">:</span> <span class="kt">Range</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">locale</span><span class="p">:</span> <span class="kt">Locale</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
      <span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Ordering</span>
  <span class="p">}</span>
</code></pre></div>            </div>

            <p>The above may not be simple, but it is much simpler than:</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">❌</span>
  <span class="kd">extension</span> <span class="kt">String</span> <span class="p">{</span>
      <span class="c1">/// ...description 1...</span>
      <span class="kd">public</span> <span class="kd">func</span> <span class="nf">compare</span><span class="p">(</span><span class="n">_</span> <span class="nv">other</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Ordering</span>
      <span class="c1">/// ...description 2...</span>
      <span class="kd">public</span> <span class="kd">func</span> <span class="nf">compare</span><span class="p">(</span><span class="n">_</span> <span class="nv">other</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="kt">CompareOptions</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Ordering</span>
      <span class="c1">/// ...description 3...</span>
      <span class="kd">public</span> <span class="kd">func</span> <span class="nf">compare</span><span class="p">(</span>
          <span class="n">_</span> <span class="nv">other</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="kt">CompareOptions</span><span class="p">,</span> <span class="nv">range</span><span class="p">:</span> <span class="kt">Range</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Ordering</span>
      <span class="c1">/// ...description 4...</span>
      <span class="kd">public</span> <span class="kd">func</span> <span class="nf">compare</span><span class="p">(</span>
          <span class="n">_</span> <span class="nv">other</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="kt">StringCompareOptions</span><span class="p">,</span>
          <span class="nv">range</span><span class="p">:</span> <span class="kt">Range</span><span class="p">,</span> <span class="nv">locale</span><span class="p">:</span> <span class="kt">Locale</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Ordering</span>
  <span class="p">}</span>
</code></pre></div>            </div>

            <p>Every member of a method family needs to be separately documented and understood by users. To decide among them, a user needs to understand all of them, and occasional surprising relationships—for example, foo(bar: nil) and foo() aren’t always synonyms—make this a tedious process of ferreting out minor differences in mostly identical documentation. Using a single method with defaults provides a vastly superior programmer experience.</p>

          </div>
  </details>
      </li>
      <li><strong>Prefer to locate parameters with defaults toward the end</strong> of the parameter list. Parameters without defaults are usually more essential to the semantics of a method, and provide a stable initial pattern of use where methods are invoked.</li>
    </ul>

  </div>
</details>

<p>번역문</p>

<p>.</p>

<h2 id="argument-labels">Argument Labels</h2>

<details>
<summary>Argument Labels 원문보기</summary>
<div>

    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">move</span><span class="p">(</span><span class="n">from</span> <span class="nv">start</span><span class="p">:</span> <span class="kt">Point</span><span class="p">,</span> <span class="n">to</span> <span class="nv">end</span><span class="p">:</span> <span class="kt">Point</span><span class="p">)</span>
<span class="n">x</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="nv">to</span><span class="p">:</span> <span class="n">y</span><span class="p">)</span> 
</code></pre></div>    </div>

    <ul>
      <li>
        <p><strong>Omit all labels when arguments can’t be usefully distinguished,</strong> e.g. min(number1, number2), zip(sequence1, sequence2).</p>
      </li>
      <li><strong>In initializers that perform value preserving type conversions, omit the first argument label,</strong> e.g. Int64(someUInt32)
        <details>
  <summary>DETAIL</summary>
  <div>

            <p>The first argument should always be the source of the conversion.</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">extension</span> <span class="kt">String</span> <span class="p">{</span>
  <span class="c1">// Convert `x` into its textual representation in the given radix</span>
  <span class="nf">init</span><span class="p">(</span><span class="n">_</span> <span class="nv">x</span><span class="p">:</span> <span class="kt">BigInt</span><span class="p">,</span> <span class="nv">radix</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span>   <span class="err">←</span> <span class="kt">Note</span> <span class="n">the</span> <span class="n">initial</span> <span class="n">underscore</span>
  <span class="p">}</span>

  <span class="n">text</span> <span class="o">=</span> <span class="s">"The value is: "</span>
  <span class="n">text</span> <span class="o">+=</span> <span class="kt">String</span><span class="p">(</span><span class="n">veryLargeNumber</span><span class="p">)</span>
  <span class="n">text</span> <span class="o">+=</span> <span class="s">" and in hexadecimal, it's"</span>
  <span class="n">text</span> <span class="o">+=</span> <span class="kt">String</span><span class="p">(</span><span class="n">veryLargeNumber</span><span class="p">,</span> <span class="nv">radix</span><span class="p">:</span> <span class="mi">16</span><span class="p">)</span>
</code></pre></div>            </div>

            <p>In “narrowing” type conversions, though, a label that describes the narrowing is recommended.</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">extension</span> <span class="kt">UInt32</span> <span class="p">{</span>
  <span class="c1">/// Creates an instance having the specified `value`.</span>
  <span class="nf">init</span><span class="p">(</span><span class="n">_</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int16</span><span class="p">)</span>            <span class="err">←</span> <span class="kt">Widening</span><span class="p">,</span> <span class="n">so</span> <span class="n">no</span> <span class="n">label</span>
  <span class="c1">/// Creates an instance having the lowest 32 bits of `source`.</span>
  <span class="nf">init</span><span class="p">(</span><span class="n">truncating</span> <span class="nv">source</span><span class="p">:</span> <span class="kt">UInt64</span><span class="p">)</span>
  <span class="c1">/// Creates an instance having the nearest representable</span>
  <span class="c1">/// approximation of `valueToApproximate`.</span>
  <span class="nf">init</span><span class="p">(</span><span class="n">saturating</span> <span class="nv">valueToApproximate</span><span class="p">:</span> <span class="kt">UInt64</span><span class="p">)</span>
  <span class="p">}</span>
</code></pre></div>            </div>

            <blockquote>
              <p>A value preserving type conversion is a <a href="https://en.wikipedia.org/wiki/Monomorphism">monomorphism</a>, i.e. every difference in the value of the source results in a difference in the value of the result. For example, conversion from Int8 to Int64 is value preserving because every distinct Int8 value is converted to a distinct Int64 value. Conversion in the other direction, however, cannot be value preserving: Int64 has more possible values than can be represented in an Int8.</p>

              <p>Note: the ability to retrieve the original value has no bearing on whether a conversion is value preserving.</p>
            </blockquote>

          </div>
  </details>
      </li>
      <li><strong>When the first argument forms part of a <a href="https://en.wikipedia.org/wiki/Adpositional_phrase#Prepositional_phrases">prepositional phrase</a>, give it an argument label.</strong> The argument label should normally begin at the <a href="https://en.wikipedia.org/wiki/Preposition_and_postposition">preposition</a>, e.g. x.removeBoxes(havingLength: 12).
        <details>
  <summary>DETAIL</summary>
  <div>

            <p>An exception arises when the first two arguments represent parts of a single abstraction.</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">❌</span>
  <span class="n">a</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">toX</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">c</span><span class="p">)</span>
  <span class="n">a</span><span class="o">.</span><span class="nf">fade</span><span class="p">(</span><span class="nv">fromRed</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="nv">green</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="nv">blue</span><span class="p">:</span> <span class="n">d</span><span class="p">)</span>
</code></pre></div>            </div>

            <p>In such cases, begin the argument label after the preposition, to keep the abstraction clear.</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">✅</span>
  <span class="n">a</span><span class="o">.</span><span class="nf">moveTo</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">c</span><span class="p">)</span>
  <span class="n">a</span><span class="o">.</span><span class="nf">fadeFrom</span><span class="p">(</span><span class="nv">red</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="nv">green</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="nv">blue</span><span class="p">:</span> <span class="n">d</span><span class="p">)</span>
</code></pre></div>            </div>

          </div>
  </details>
      </li>
      <li><strong>Otherwise, if the first argument forms part of a grammatical phrase, omit its label,</strong> appending any preceding words to the base name, e.g. x.addSubview(y)
        <details>
  <summary>DETAIL</summary>
  <div>

            <p>This guideline implies that if the first argument doesn’t form part of a grammatical phrase, it should have a label.</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">✅</span>
  <span class="n">view</span><span class="o">.</span><span class="nf">dismiss</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
  <span class="k">let</span> <span class="nv">text</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="nv">maxSplits</span><span class="p">:</span> <span class="mi">12</span><span class="p">)</span>
  <span class="k">let</span> <span class="nv">studentsByName</span> <span class="o">=</span> <span class="n">students</span><span class="o">.</span><span class="nf">sorted</span><span class="p">(</span><span class="nv">isOrderedBefore</span><span class="p">:</span> <span class="kt">Student</span><span class="o">.</span><span class="n">namePrecedes</span><span class="p">)</span>
</code></pre></div>            </div>

            <p>Note that it’s important that the phrase convey the correct meaning. The following would be grammatical but would express the wrong thing.</p>

            <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">❌</span>
  <span class="n">view</span><span class="o">.</span><span class="nf">dismiss</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>   <span class="kt">Don</span><span class="err">'</span><span class="n">t</span> <span class="n">dismiss</span><span class="p">?</span> <span class="kt">Dismiss</span> <span class="n">a</span> <span class="kt">Bool</span><span class="p">?</span>
  <span class="n">words</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>       <span class="kt">Split</span> <span class="n">the</span> <span class="n">number</span> <span class="mi">12</span><span class="p">?</span>
</code></pre></div>            </div>

            <p>Note also that arguments with default values can be omitted, and in that case do not form part of a grammatical phrase, so they should always have labels.</p>

          </div>
  </details>
      </li>
      <li><strong>Label all other arguments.</strong></li>
    </ul>

  </div>
</details>

<p>번역문</p>
:ET